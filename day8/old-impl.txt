func findConcurrentSteps(instructions []string, starterNodes *[]models.Node) []int {
	var steps []int
	var wg sync.WaitGroup
	re := regexp.MustCompile(`..Z`)

	// Nodes need to be checked at the same time to see when all of them get to the end...

	for _, n := range *starterNodes {
		wg.Add(1)
		go func(startNode models.Node, currentSteps *[]int) {
			defer wg.Done()
			i, counter := 0, 0
			node := &startNode
			for {
				counter++
				node = h.Ternary(instructions[i] == "L", node.LeftNode, node.RightNode)
				if re.MatchString((*node).Id) {
					break
				}
				i++
				if i == len(instructions) {
					i = 0
				}
			}

			steps = append(steps, counter)
		}(n, &steps)
	}
	wg.Wait()
	return steps
}
